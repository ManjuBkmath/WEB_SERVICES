<?xml version="1.0" encoding="UTF-8"?>
<xs:schema 
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.danielpm1982.com/noteAllInclude"
	xmlns:danielpm1982="http://www.danielpm1982.com/noteAllInclude"
	elementFormDefault="qualified">
	
	<!-- 	importing of all Note1 and Note2 xsd elements, types and attributes -->
	<xs:include schemaLocation="Note1ForInclude.xsd" />
	<xs:include schemaLocation="Note2ForInclude.xsd" />
	<!-- 	unique attributes for element types	 -->
	<xs:attribute name="mailId" type="xs:nonNegativeInteger" default="0" />
	
	<!-- 	complex types for elements -->
	<xs:complexType name="noteType">
		<xs:sequence>
			<xs:element name="from" type="danielpm1982:fromType" />
			<xs:element name="to" type="danielpm1982:toType" />
			<xs:element name="messageText" type="danielpm1982:messageTextType" />
			<xs:element name="dateTime" type="danielpm1982:dateTimeType" />
			<xs:element name="origin" type="danielpm1982:originType" />
			<xs:element name="destine" type="danielpm1982:destineType" />
			<xs:element name="content" type="danielpm1982:contentType" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute ref="danielpm1982:mailId" use="required" />
	</xs:complexType>
	<!-- 	complex root element -->
	<xs:element name="note" type="danielpm1982:noteType" />
</xs:schema>

<!-- An example with the including of two different namespaces schemas (Note1ForInclude.xsd and Note2ForInclude.xsd), 
with equal target namespaces and different schemaLocations. The target namespaces, at each included XSD document, as
at this document itself (the including one), must be identical, for the <xs:include> to be used. 
The instances of this including XSD document can then refer to the one and only target namespace (of this XSD) and
use all included components from the other included XSD documents.
Observe the risk of conflict between equal named components at any of the XSD documents involved, as the namespaces
of the three XSD documents are exactly the same, and cannot have any duplicated named component.
If this XSD document would be to import different XSD files, with different namespaces, which could be independently
reached from inside this XSD document or from its instances, <xs:import> should be used instead, in order to use all 
imported components but maintaining the original and different target namespaces independent.
See the other XSD and XML files as an example of using xs:import, instead of xs:include.
That's the 2 ways you can import other XSD files to a certain XSD, in order to reuse their components: xs:import or 
xs:include.
-->
